@{
	Layout = @"/_Master.cshtml";
	ViewData["Title"] = "Modules - " + Model["DisplayName"];
}

@section Infobar {			
    @Html.Partial("_Infobar") 
}

@section Search {
    @Html.Partial("_ModulesSearch")
    <hr />
}

@section Sidebar {
	@Html.Partial("_ModulesSidebar")
}

<section class="content-header">
    <h1>
		@Model.Name()
		@{
			string package = null;
			IDocument containingNamespace = Model.Get<IDocument>("ContainingNamespace");
			if(containingNamespace != null)
			{
				package = string.Join(".", containingNamespace.String("DisplayName").Split('.').Take(2));
				if(!package.StartsWith("Wyam.Core"))
				{
					<small><span class="label label-default">@package</span></small>
				}
			}
		}
	</h1>
</section>
<section class="content">
	@RenderBody()  @* Empty, but needs to be here *@
	
	@{
		// Summary
		string summary = Model.String("Summary");
		if(!string.IsNullOrWhiteSpace(summary))
		{
			<div class="lead">@Html.Raw(summary)</div>
		}
		
		// Remarks
		string remarks = Model.String("Remarks");
		if(!string.IsNullOrWhiteSpace(remarks))
		{
			<div>@Html.Raw(remarks)</div>
		}
		
		// Package
		if(!package.StartsWith("Wyam.Core"))
		{
			<h1 id="Package">Package</h1>
			<div>This module exists in the <strong>@package</strong> package which is not part of the core distribution. Add the following preprocessor directive to your <a href="/docs/usage/configuration">configuration file</a> to use it:</div>
			<pre class="prettyprint"><code>#n @package</code></pre>
		}
		
		// Examples
		string examples = Model.String("Example");
		if(!string.IsNullOrWhiteSpace(examples))
		{
			<h1 id="Examples">Examples</h1>
			<div>@Html.Raw(examples)</div>
		}
		
		<h1 id="Usage">Usage</h1>
		
		// Constructors
		<ul>			
		@{			
			IReadOnlyList<IDocument> constructors =
				Model.List<IDocument>("Constructors")
				?.OrderBy(x => x["DisplayName"])
				.ToList();
			if(constructors != null && constructors.Count > 0)
			{
				foreach(IDocument constructor in constructors)
				{
					string syntax = constructor.String("Syntax");
					string constructorSummary = constructor.String("Summary");
					IReadOnlyList<IDocument> parameters = constructor.List<IDocument>("Parameters");
					IReadOnlyList<ReferenceComment> paramComments = constructor.List<ReferenceComment>("Params");
					<li>
						@{
							if(!string.IsNullOrWhiteSpace(syntax))
							{
								<p><strong><code>@(syntax.Substring(syntax.IndexOf(" ") + 1))</code></strong></p>
							}
							if(!string.IsNullOrWhiteSpace(constructorSummary))
							{
								<p>@Html.Raw(constructorSummary)</p>
							}
							if(parameters != null && parameters.Count > 0 && paramComments != null && paramComments.Count > 0)
							{
								<ul>
									@foreach(IDocument parameter in parameters)
									{
										string paramSummary = paramComments?.Where(x => x.Name.Equals(parameter["Name"])).Select(x => x.Html).FirstOrDefault();
										paramSummary = paramSummary == null ? string.Empty : "<p>" + paramSummary + "</p>";
										<li><p><code>@parameter["Name"]</code></p>@Html.Raw(paramSummary)</li>
									}
								</ul>
							}
						}
					</li>				
				}
			}
			else
			{
				<li><p><strong><code>@(Model.Name())()</code></strong></p></li>
			}
		}
		</ul>
		
		// Methods (including from base types)
		List<IDocument> methods =
			Model.List<IDocument>("Members")
				?.Where(x => x.String("Kind") == "Method"
					&& x.String("Accessibility") == "Public" 
					&& (x.Get<IDocument>("ReturnType").List<IDocument>("AllInterfaces")?.Any(y => y.String("Name") == "IModule") ?? false))
				.ToList();
		if(methods != null)
		{
			IDocument baseType = Model.Get<IDocument>("BaseType");
			while(baseType != null)
			{
				methods.AddRange(baseType.List<IDocument>("Members")
					?.Where(x => x.String("Kind") == "Method" && x.Get<IDocument>("ReturnType")
						.List<IDocument>("AllInterfaces").Any(y => y.String("Name") == "IModule")));
				baseType = baseType.Get<IDocument>("BaseType");
			}
			methods.Sort((a, b) => a.String("DisplayName").CompareTo(b.String("DisplayName")));
		}
		if(methods != null && methods.Count > 0)
		{
			<h1 id="methods">Fluent Methods</h1>
			<p>Chain these methods together after the constructor to modify behavior.</p>
			<ul>
				@foreach(IDocument method in methods)
				{
					string syntax = method.String("Syntax");
					string methodSummary = method.String("Summary");
					IReadOnlyList<IDocument> parameters = method.List<IDocument>("Parameters");
					IReadOnlyList<ReferenceComment> paramComments = method.List<ReferenceComment>("Params");
					<li>
						@{
							if(!string.IsNullOrWhiteSpace(syntax))
							{
								// Two spaces - once for access modifier and again for return type
								<p><strong><code>@(syntax.Substring(syntax.IndexOf(" ", syntax.IndexOf(" ") + 1) + 1))</code></strong></p>
							}
							if(!string.IsNullOrWhiteSpace(methodSummary))
							{
								<p>@Html.Raw(methodSummary)</p>
							}
							if(parameters != null && parameters.Count > 0 && paramComments != null && paramComments.Count > 0)
							{
								<ul>
									@foreach(IDocument parameter in parameters)
									{
										string paramSummary = paramComments?.Where(x => x.Name.Equals(parameter["Name"])).Select(x => x.Html).FirstOrDefault();
										paramSummary = paramSummary == null ? string.Empty : "<p>" + paramSummary + "</p>";
										<li><p><code>@parameter["Name"]</code></p>@Html.Raw(paramSummary)</li>
									}
								</ul>
							}
						}
					</li>				
				}				
			</ul>
		}
		
		// Metadata
		@Html.Partial("_Keys", new KeysModel(Model.String(CodeAnalysisKeys.QualifiedName), "Setting")
		{
			Intro = @"<h1 id=""settings"">Settings</h1><p>The settings listed below apply globally and can be set from the <a href=""/docs/usage/command-line"">command line</a> or from a <a href=""/docs/usage/settings"">configuration file</a>. They are used to configure options and otherwise control module behavior.</p>"
		})
		@Html.Partial("_Keys", new KeysModel(Model.String(CodeAnalysisKeys.QualifiedName), "Input")
		{
			Intro = @"<h1 id=""input-metadata"">Input Metadata</h1><p>The metadata values listed below apply to individual documents and are typically set from <a href=""/docs/concepts/metadata#front-matter"">front matter</a> (with just the name of the key) and used as inputs to the module to control behavior.</p>"
		})
		@Html.Partial("_Keys", new KeysModel(Model.String(CodeAnalysisKeys.QualifiedName), "Output")
		{
			Intro = @"<h1 id=""output-metadata"">Output Metadata</h1><p>The metadata values listed below apply to individual documents and are created and set by the module as indicated in their descriptions.</p>"
		})		
	}	
</section>
